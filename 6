
#include <iostream>
using namespace std;
template <typename T=int>
class Queue {
	static const int SIZE = 100;
	int *queue;
	int frnt, rear;
public:
	//Queue();
	//Конструктор
	Queue::Queue() {
		queue = new int[SIZE];
		frnt = rear = 0;
	}
	//Вывод элементов очереди
	void Queue::out() {
		for (int i = frnt + 1; i<rear + 1; i++)
			cout << " " << queue[i];
		cout << endl;
		if (frnt == rear) {
			cout << "очередь пуста" << endl;
		}
	}
	//Помещение элемента в очередь
	void Queue::push(int T) {
		if (rear + 1 == frnt || (rear + 1 == SIZE && !frnt)) {
			cout << "очередь полна" << endl;
			return;
		}
		rear++;
		if (rear == SIZE) rear = 0;
		queue[rear] = T;
	}
	// Извлечение элемента из очереди
	void Queue::pop() {
		if (frnt == rear) {
			cout << "очередь пуста" << endl;
			return;
		}
		frnt++;
		if (frnt == SIZE) frnt = 0;
	}
	//poisk
	void search()
	{
		int n;
		int i;
		cout << "Поиск элемента :\n" << endl;
		cin >> n;
		for (i = 0; i < rear+1; i++)
		{
			if (queue[i] == n)
			{
				cout << "The element you are looking for is number " << i  << endl;
				break;
			}
		}
		if (i == rear+2)
			cout << "\nThere is no such element\n" << endl;
	}
	void sort()
	{
		for (int i = 0; i < rear+1; i++)
			for (int j = 0; j < rear; j++)
				if (queue[j] > queue[j + 1])
				{
					int tmp = queue[j];
					queue[j] = queue[j + 1];
					queue[j + 1] = tmp;
				}
	}
	void DataTypeSize() {
		cout << "sizeof = " << sizeof(*queue)<<endl;
	}
	bool operator< (Queue q2) const
	{
		return (rear < q2.rear) ? true : false;
	}
	bool operator> (Queue q2) const
	{
		return (rear > m2.rear) ? true : false;
	}
	//Определение размера очереди
	int Queue::size() {
		int s = 0;
		for (int i = frnt; i<rear; i++)
			s++;
		return s;
	}
	// Последний элемент очереди
	int Queue::back() {
		return queue[rear];
	}
	// Первый элемент очереди
	int Queue::front() {
		return queue[frnt + 1];
	}
};


template <>
class Queue<char> {
	static const int SIZE = 100;
	char *queue;
	int frnt, rear;
public:
	//Queue();
	//Конструктор
	Queue::Queue() {
		queue = new char[SIZE];
		frnt = rear = 0;
	}
	//Вывод элементов очереди
	void Queue::out() {
		for (int i = frnt + 1; i<rear + 1; i++)
			cout << " " << queue[i]<<endl;
		if (frnt == rear) {
			cout << "очередь пуста" << endl;
		}
	}
	//Помещение элемента в очередь
	void Queue::push(char T) {
		if (rear + 1 == frnt || (rear + 1 == SIZE && !frnt)) {
			cout << "очередь полна" << endl;
			return;
		}
		rear++;
		if (rear == SIZE) rear = 0;
		queue[rear] = T;
	}
	// Извлечение элемента из очереди
	void Queue::pop() {
		if (frnt == rear) {
			cout << "очередь пуста" << endl;
			return;
		}
		frnt++;
		if (frnt == SIZE) frnt = 0;
	}
	//Определение размера очереди
	int Queue::size() {
		int s = 0;
		for (int i = frnt; i<rear; i++)
			s++;
		return s;
	}
	void DataTypeSize() {
		cout << "sizeof = " << sizeof(queue[0]) << endl;
	}
	// Последний элемент очереди
	int Queue::back() {
		return queue[rear];
	}
	// Первый элемент очереди
	int Queue::front() {
		return queue[frnt + 1];
	}
};

//Наследование шаблона
template <typename T>
class Typeinfo : public Queue<T>
{};

int main() {
	system("chcp 1251");
	system("cls");
	Queue<> queue0;
	cout << "argument po umolchaniu (int)" << endl;
	queue0.out();
	queue0.DataTypeSize();
	Queue<int> queue1;
	int i;
	
	for (i = 1; i <= 5; i++)
		queue1.push(i);
	cout << "Изначальная очередь ";
	queue1.out();
	cout << "введите еще элемент: ";
	cin >> i;
	queue1.push(i);
	cout << "теперь очередь имеет следующий вид" << endl;
	queue1.out();
	queue1.search();
	cout << "Sortirovka" << endl;
	queue1.sort();
	queue1.out();
	cout << endl << "удаление элемента";
	queue1.pop();
	cout << endl << "текущие данные";
	queue1.out();
	if (queue0 < queue1) 
		cout << "\n\nThe first queue is smaller than the second\n" << endl;
	else
		cout << "\n\nThe first queue is bigger than the second\n" << endl;
	
	cout << "special argument(char)" << endl;
	Queue<char> queue2;
	queue2.out();
	queue2.DataTypeSize();
	cin.get(); cin.get();
	return 0;
}
