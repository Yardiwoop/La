//Двумерный массив(матрица) 	бинарные арифметические(+) и сравнения(> и <)	вывода в поток(<< )

#include <iostream>
using namespace std;

class matr
{
private:
	int **yarik_matr;
	int high;
	int down;
public:
	matr() 
	{
		high = 1; down = 1;
		yarik_matr = new int*[high];
		yarik_matr[0] = new int[down];
		yarik_matr[0][0] = 1;
	}
	matr(int a, int b) 
	{
		high = a; down = b;
		yarik_matr = new int*[high];
		for (int h = 0; h<high; h++)
		{
			yarik_matr[h] = new int[down];
			for (int f = 0; f<down; f++)
			{
				yarik_matr[h][f] = (rand() % 100);
			}
		}
	}
	matr(const matr& tt) 
	{
		high = tt.high;
		down = tt.down;
		yarik_matr = new int*[high];
		for (int h = 0; h<high; h++)
		{
			yarik_matr[h] = new int[down];
			for (int f = 0; f<down; f++)
			{
				yarik_matr[h][f] = tt.yarik_matr[h][f];
			}
		}
	}
	~matr() 
	{
		for (int k = 0; k<high; k++)
		{
			delete[]yarik_matr[k];
		}
		delete(yarik_matr);
		
	}

	matr operator+(matr m2) const
	{	
		matr c(high, down);
		for (int y = 0; y<high; y++)
		{
			for (int x = 0; x<down; x++)
			{
				c.yarik_matr[y][x] = yarik_matr[y][x] + m2.yarik_matr[y][x];
			}
		}
		return c;
	}

	friend ostream& operator << (ostream& out, matr m)
	{
		for (int k = 0; k<m.high; k++)
		{
			for (int h = 0; h<m.down; h++)
			{
				cout << m.getmatr_el(k, h) << " ";
			}
			cout << endl;
		}
		return out;
	}
	void setmatr_el(int row_el, int col_el);
	int getmatr_el(int row_el, int col_el);
	void input();
	void change();
};

void out_matr(matr m);

int main()
{
	cout << "begin" << endl;
	int a = 10, b = 10;
	matr abc(a, b);                              
	cout << "abc:\n" << abc << "\n" << endl;     

	matr cd(abc);                               
	cout << "cd:\n" << cd;

	matr sum = abc + cd;                          
	cout << "sum:\n" << sum << "\n" << endl;

	matr a2;                                  
	cout << a2;
	int i = 3, j = 4;
	matr* mx = new matr(i, j);
	mx->input();
	cout << "mx:\n" << (*mx) << "\n" << endl;
	matr * mx_copy = new matr(*mx);
	mx->change();
	cout << "mx:\n" << (*mx) << "\n" << endl;
	cout << "mx_copy:\n" << (*mx_copy) << "\n" << endl;
	delete mx;
	delete mx_copy;
	int n = 3;
	matr *mas = new matr[n];
	for (int f = 0; f<n; f++)
	{
		cout << "mas[" << f << "]: " << mas[f] << endl;
	}
	for (int f = 0; f<n; f++)
	{
		cout << "mas[" << f << "]: " << endl;
		mas[f].input();
	}
	for (int f = 0; f<n; f++)
	{
		cout << "mas[" << f << "]: " << mas[f] << endl;
	}
	delete[]mas;

	cout << "End of program" << endl;
	return 0;
}

void matr::setmatr_el(int row_el, int col_el)
{
	int k = 0;
	int flag = 0;
	do
	{
		flag = 0;
		rewind(stdin);
		cout << "Input element[" << row_el << "][" << col_el << "]" << endl;
		cin >> k;
		if (cin.fail())                    
		{
			cin.clear();
			cin.ignore();
			flag = 1;
		}
	} while (flag);
	yarik_matr[row_el][col_el] = k;
}

int matr::getmatr_el(int row_el, int col_el)
{
	return yarik_matr[row_el][col_el];
}

void matr::change()                    
										
{
	if ((high == 1 && down == 1) || (high == 0 && down == 0))
	{
		cout << "Too small" << endl;
		return;
	}
	if (down % 2 == 1)
	{
		int k = down / 2;
		int temp = 0;
		for (int h = 0; h<high; h++)
		{
			temp = yarik_matr[h][0];
			yarik_matr[h][0] = yarik_matr[h][k];
			yarik_matr[h][k] = temp;
		}
	}
	else
	{
		int prev = down / 2 - 1;
		int next = prev + 1;
		int temp = 0;
		if (down == 2)                         
		{
			for (int h = 0; h<high; h++)
			{
				temp = yarik_matr[h][0];
				yarik_matr[h][0] = yarik_matr[h][1];
				yarik_matr[h][1] = temp;
			}
			return;
		}

		for (int h = 0; h<high; h++)
		{
			temp = yarik_matr[h][0];
			yarik_matr[h][0] = yarik_matr[h][prev];
			yarik_matr[h][prev] = temp;
		}
		for (int h = 0; h<high; h++)
		{
			temp = yarik_matr[h][down - 1];
			yarik_matr[h][down - 1] = yarik_matr[h][next];
			yarik_matr[h][next] = temp;
		}
	}
}

void matr::input()
{
	for (int m = 0; m<high; m++)
	{
		for (int n = 0; n<down; n++)
		{
			setmatr_el(m, n);
		}
	}
}

